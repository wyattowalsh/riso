{%- if cli_module | lower != "enabled" %}
"""CLI module disabled.

Re-render the template with `cli_module=enabled` to scaffold the Typer CLI.
"""


def main() -> None:
    """Entry point placeholder when the CLI is not enabled."""

    raise SystemExit("CLI module is disabled for this render.")


if __name__ == "__main__":
    main()
{%- else %}
from __future__ import annotations

from typing import Any, Mapping

import typer
from loguru import logger

try:
    from shared.logic import build_health_payload, summarize_payload
except ImportError:  # pragma: no cover - shared logic is optional

    def build_health_payload(
        service: str, *, dry_run: bool = False, checks: list[Mapping[str, Any]] | None = None
    ) -> dict[str, Any]:
        payload: dict[str, Any] = {"service": service, "status": "ok", "dry_run": dry_run}
        if checks:
            payload["checks"] = list(checks)
        return payload

    def summarize_payload(payload: Mapping[str, Any]) -> str:
        status = str(payload.get("status", "unknown"))
        service = str(payload.get("service", "service"))
        suffix = " (dry run)" if payload.get("dry_run") else ""
        return f"{service} status: {status}{suffix}"

from ..quickstart import run_quickstart

app = typer.Typer(no_args_is_help=True, rich_markup_mode="rich")


@app.command()
def quickstart(
    dry_run: bool = typer.Option(False, help="Run validations without executing external commands.")
) -> None:
    """Execute the baseline quickstart workflow."""

    logger.info("Starting quickstart workflow (dry_run=%s)", dry_run)
    result = run_quickstart(dry_run=dry_run)
    payload = build_health_payload("cli-quickstart", dry_run=dry_run)
    typer.echo(summarize_payload(payload))
    if result.get("status") != "ok":
        logger.error("Quickstart failed: {}", result)
        raise typer.Exit(code=1)
    logger.success("Quickstart completed successfully")


def main() -> None:
    """Invoke the Typer application."""

    app()


if __name__ == "__main__":
    main()
{%- endif %}
