{%- if api_tracks | lower not in ["python", "python+node"] %}
"""Python API module disabled for this render.

Enable via `api_tracks=python` or `api_tracks=python+node` to scaffold settings.
"""


class ApiSettings:  # pragma: no cover - placeholder for disabled module
    service_name: str = "api-python"
    host: str = "127.0.0.1"
    port: int = 8000
    reload: bool = False
    log_level: str = "info"
    health_retry_attempts: int = 1
    health_retry_wait_seconds: int = 0


def get_settings() -> ApiSettings:
    return ApiSettings()
{%- else %}
"""Settings and helpers for the FastAPI track."""

from __future__ import annotations

from functools import lru_cache

from pydantic import Field
from pydantic_settings import BaseSettings, SettingsConfigDict


class ApiSettings(BaseSettings):
    """Configuration for the FastAPI service."""

    model_config = SettingsConfigDict(
        env_prefix="RISO_API_",
        env_file=".env",
        env_file_encoding="utf-8",
    )

    service_name: str = Field(default="api-python", description="Service identifier used in logs and telemetry.")
    host: str = Field(default="127.0.0.1", description="Bind address for the ASGI server.")
    port: int = Field(default=8000, description="Port exposed by the ASGI server.")
    reload: bool = Field(default=False, description="Enable uvicorn autoreload (development only).")
    log_level: str = Field(default="info", description="Log level passed to uvicorn.")
    health_retry_attempts: int = Field(default=3, description="Number of retries for health computations.")
    health_retry_wait_seconds: int = Field(default=1, description="Delay between health retries.")


@lru_cache
def get_settings() -> ApiSettings:
    """Return cached settings instance."""
    return ApiSettings()
{%- endif %}
